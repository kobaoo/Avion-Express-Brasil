import os
import sys
import psycopg2
from psycopg2.extras import execute_values
from dotenv import load_dotenv

load_dotenv()

PGHOST = os.getenv("PGHOST", "localhost")
PGPORT = int(os.getenv("PGPORT", "5432"))
PGDB   = os.getenv("PGDATABASE", "postgres")
PGUSER = os.getenv("PGUSER", "postgres")
PGPASS = os.getenv("PGPASSWORD", "postgres")
PGSCHEMA = os.getenv("PGSCHEMA", "olist")

def get_conn():
    dsn = f"host={PGHOST} port={PGPORT} dbname={PGDB} user={PGUSER} password={PGPASS}"
    conn = psycopg2.connect(dsn)
    conn.autocommit = False  # —É–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ —Å–∞–º–∏
    with conn.cursor() as cur:
        cur.execute("SET search_path TO %s, public;", (PGSCHEMA,))
    return conn

def insert_customer(conn, customer):
    """
    customer: (customer_id, customer_unique_id, zip_prefix, city, state)
    """
    sql = """
    INSERT INTO customers (
        customer_id, customer_unique_id, customer_zip_code_prefix, customer_city, customer_state
    )
    VALUES (%s, %s, %s, %s, %s)
    ON CONFLICT (customer_id) DO NOTHING;
    """
    with conn.cursor() as cur:
        cur.execute(sql, customer)

def insert_seller(conn, seller):
    """
    seller: (seller_id, zip_prefix, city, state)
    """
    sql = """
    INSERT INTO sellers (
        seller_id, seller_zip_code_prefix, seller_city, seller_state
    )
    VALUES (%s, %s, %s, %s)
    ON CONFLICT (seller_id) DO NOTHING;
    """
    with conn.cursor() as cur:
        cur.execute(sql, seller)

def insert_order(conn, order):
    """
    order: (order_id, customer_id, order_status)
    –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å NULL.
    """
    sql = """
    INSERT INTO orders (
        order_id, customer_id, order_status,
        order_purchase_timestamp, order_approved_at,
        order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date
    )
    VALUES (%s, %s, %s, NULL, NULL, NULL, NULL, NULL)
    ON CONFLICT (order_id) DO NOTHING;
    """
    with conn.cursor() as cur:
        cur.execute(sql, order)

def interactive():
    print("=== PostgreSQL demo insert (olist) ===")
    try:
        conn = get_conn()
    except Exception as e:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î:", e)
        sys.exit(1)

    try:
        # 1) –í—Å—Ç–∞–≤–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (customers)
        print("\n‚Äî –î–æ–±–∞–≤–∏–º customer ‚Äî")
        cid = input("customer_id (—Å—Ç—Ä–æ–∫–∞, —É–Ω–∏–∫–∞–ª—å–Ω–∞—è): ").strip()
        cuid = input("customer_unique_id (–º–æ–∂–Ω–æ —Ç–æ—Ç –∂–µ –∏–ª–∏ –∏–Ω–æ–π): ").strip() or cid
        zip_prefix = input("customer_zip_code_prefix (—á–∏—Å–ª–æ): ").strip() or "0"
        city = input("customer_city: ").strip() or "unknown"
        state = input("customer_state (–¥–≤–µ –±—É–∫–≤—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä SP): ").strip() or "NA"

        insert_customer(conn, (cid, cuid, int(zip_prefix), city, state))
        print("‚úÖ customers: –≤—Å—Ç–∞–≤–∫–∞/–∞–ø—Å–µ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        # 2) –í—Å—Ç–∞–≤–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ (sellers)
        print("\n‚Äî –î–æ–±–∞–≤–∏–º seller ‚Äî")
        sid = input("seller_id (—Å—Ç—Ä–æ–∫–∞, —É–Ω–∏–∫–∞–ª—å–Ω–∞—è): ").strip()
        szip = input("seller_zip_code_prefix (—á–∏—Å–ª–æ): ").strip() or "0"
        scity = input("seller_city: ").strip() or "unknown"
        sstate = input("seller_state: ").strip() or "NA"

        insert_seller(conn, (sid, int(szip), scity, sstate))
        print("‚úÖ sellers: –≤—Å—Ç–∞–≤–∫–∞/–∞–ø—Å–µ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        # 3) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –í—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ customer
        print("\n‚Äî –î–æ–±–∞–≤–∏–º order (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî")
        do_order = input("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π order? [y/N]: ").strip().lower()
        if do_order == "y":
            oid = input("order_id (—Å—Ç—Ä–æ–∫–∞, —É–Ω–∏–∫–∞–ª—å–Ω–∞—è): ").strip()
            status = input("order_status (–Ω–∞–ø—Ä–∏–º–µ—Ä created/shipped/delivered): ").strip() or "created"
            insert_order(conn, (oid, cid, status))
            print("‚úÖ orders: –≤—Å—Ç–∞–≤–∫–∞/–∞–ø—Å–µ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        conn.commit()
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        conn.rollback()
        print("‚õî –û—à–∏–±–∫–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–µ–Ω–∞:", e)
    finally:
        conn.close()

if __name__ == "__main__":
    interactive()
